function _mergeNamespaces(e,n){return n.forEach((function(n){n&&"string"!=typeof n&&!Array.isArray(n)&&Object.keys(n).forEach((function(o){if("default"!==o&&!(o in e)){var a=Object.getOwnPropertyDescriptor(n,o);Object.defineProperty(e,o,a.get?a:{enumerable:!0,get:function(){return n[o]}})}}))})),Object.freeze(e)}function roboconf(e){const n="[a-zA-Z-_][^\\n{]+\\{",o={className:"attribute",begin:/[a-zA-Z-_]+/,end:/\s*:/,excludeEnd:!0,starts:{end:";",relevance:0,contains:[{className:"variable",begin:/\.[a-zA-Z-_]+/},{className:"keyword",begin:/\(optional\)/}]}};return{name:"Roboconf",aliases:["graph","instances"],case_insensitive:!0,keywords:"import",contains:[{begin:"^facet "+n,end:/\}/,keywords:"facet",contains:[o,e.HASH_COMMENT_MODE]},{begin:"^\\s*instance of "+n,end:/\}/,keywords:"name count channels instance-data instance-state instance of",illegal:/\S/,contains:["self",o,e.HASH_COMMENT_MODE]},{begin:"^"+n,end:/\}/,contains:[o,e.HASH_COMMENT_MODE]},e.HASH_COMMENT_MODE]}}var roboconf_1=roboconf,roboconf$1=Object.freeze(_mergeNamespaces({__proto__:null,[Symbol.toStringTag]:"Module",default:roboconf_1},[roboconf_1]));export{roboconf$1 as r};