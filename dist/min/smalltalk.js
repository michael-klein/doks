function _mergeNamespaces(e,a){return a.forEach((function(a){a&&"string"!=typeof a&&!Array.isArray(a)&&Object.keys(a).forEach((function(t){if("default"!==t&&!(t in e)){var l=Object.getOwnPropertyDescriptor(a,t);Object.defineProperty(e,t,l.get?l:{enumerable:!0,get:function(){return a[t]}})}}))})),Object.freeze(e)}function smalltalk(e){const a="[a-z][a-zA-Z0-9_]*",t={className:"string",begin:"\\$.{1}"},l={className:"symbol",begin:"#"+e.UNDERSCORE_IDENT_RE};return{name:"Smalltalk",aliases:["st"],keywords:"self super nil true false thisContext",contains:[e.COMMENT('"','"'),e.APOS_STRING_MODE,{className:"type",begin:"\\b[A-Z][A-Za-z0-9_]*",relevance:0},{begin:a+":",relevance:0},e.C_NUMBER_MODE,l,t,{begin:"\\|[ ]*"+a+"([ ]+"+a+")*[ ]*\\|",returnBegin:!0,end:/\|/,illegal:/\S/,contains:[{begin:"(\\|[ ]*)?"+a}]},{begin:"#\\(",end:"\\)",contains:[e.APOS_STRING_MODE,t,e.C_NUMBER_MODE,l]}]}}var smalltalk_1=smalltalk,smalltalk$1=Object.freeze(_mergeNamespaces({__proto__:null,[Symbol.toStringTag]:"Module",default:smalltalk_1},[smalltalk_1]));export{smalltalk$1 as s};